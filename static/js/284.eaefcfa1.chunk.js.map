{"version":3,"file":"static/js/284.eaefcfa1.chunk.js","mappings":"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","sources":["components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","redux/contacts/contactsSelectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","pages/Contacts.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\nfunction Contact({ name, id, phone }) {\n  const dispatch = useDispatch();\n\n  const deleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n    Notify.success(\n      `Contact whith name ${name} successfully added to phonebook!`\n    );\n  };\n\n  return (\n    <li key={id}>\n      <p>\n        {name}: <span>{phone}</span>\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          deleteContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default Contact;\n\nContact.propType = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledContactsTitle = styled.h2`\n  text-align: center;\n`;\n\nexport const StyledContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  max-width: 350px;\n  width: 100%;\n  margin: 20px auto 25px;\n  gap: 16px;\n\n  list-style: none;\n`;\n","export const selectContacts = state => state.appContacts.contacts;\nexport const selectFilter = state => state.appContacts.filter;\nexport const selectIsLoading = state => state.appContacts.isLoading;\nexport const selectError = state => state.appContacts.error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Contact from 'components/Contact/Contact';\nimport { StyledContactsList, StyledContactsTitle } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nfunction ContactsList({ title, contacts, deleteContact }) {\n  const filter = useSelector(selectFilter);\n  const contactsFilter = () => {\n    return contacts.filter(({ name }) =>\n      name?.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = contactsFilter();\n\n  return (\n    <>\n      <StyledContactsTitle>{title}</StyledContactsTitle>\n      <StyledContactsList>\n        {filteredContacts.map(({ name, id, number }) => {\n          return (\n            <Contact\n              key={id}\n              name={name}\n              id={id}\n              phone={number}\n              deleteContact={deleteContact}\n            ></Contact>\n          );\n        })}\n      </StyledContactsList>\n    </>\n  );\n}\n\nexport default ContactsList;\n\nContactsList.propType = {\n  deleteContact: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledFilterTitle = styled.p`\n  text-align: center;\n`;\n\nexport const StyledFilterBox = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 350px;\n  margin: 20px auto 25px;\n  gap: 16px;\n  border: 1px solid;\n  border-radius: 15px;\n`;\n","import React from 'react';\nimport { StyledFilterBox, StyledFilterTitle } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nfunction Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = event => dispatch(setFilter(event.currentTarget.value));\n\n  return (\n    <StyledFilterBox>\n      <StyledFilterTitle>Find contacts by name</StyledFilterTitle>\n      <input value={filter} type=\"text\" required onChange={handleFilter} />\n    </StyledFilterBox>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  max-width: 350px;\n  width: 100%;\n  margin: 20px auto 25px;\n  gap: 16px;\n  border: 1px solid;\n  border-radius: 15px;\n\n  .form-label {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .form-btn {\n    border: none;\n    background: #000;\n    color: #fff;\n    padding: 15px;\n    border-radius: 10px;\n    cursor: pointer;\n  }\n`;\n","import { useState } from 'react';\nimport { StyledForm } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContactThunk } from 'redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\nexport default function Form({ title }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contactData = {\n      name: name,\n      number: number,\n    };\n    const loveredContactData = contactData.name.toLowerCase();\n    const isContactExist = contacts.some(\n      contact => contact.name.toLowerCase() === loveredContactData\n    );\n    const resetInputForm = () => {\n      setName('');\n      setNumber('');\n    };\n\n    if (isContactExist) {\n      alert(`Contact whith name ${contactData.name} is already exists`);\n      return;\n    }\n\n    dispatch(addContactThunk(contactData));\n    Notify.success(\n      `Contact whith name ${contactData.name} successfully added to phonebook!`\n    );\n    resetInputForm();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <h2>{title}</h2>\n      <label className=\"form-label\">\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"contactName\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' \\\\\\-][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className=\"form-label\">\n        <span>Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          id=\"ContactNumber\"\n          title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className=\"form-btn\" type=\"submit\">\n        Add contact\n      </button>\n    </StyledForm>\n  );\n}\n\nForm.propType = {\n  onSubmit: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport Form from 'components/Form/Form';\nimport Loader from 'components/Loader/Loader';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoggedIn } from 'redux/auth/authSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const IsLoggedIn = useSelector(getIsLoggedIn);\n\n  useEffect(() => {\n    if (IsLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, IsLoggedIn]);\n\n  return (\n    <>\n      <Form title=\"Phonebook\"></Form>\n      {contacts.length > 0 && !isLoading && <Filter></Filter>}\n      {contacts.length > 0 ? (\n        <ContactsList contacts={contacts} title=\"Contacts\"></ContactsList>\n      ) : (\n        <p>Your phone book is empty</p>\n      )}\n      {isLoading && !error && <Loader />}\n      {error && <p>Error: {error}</p>}\n    </>\n  );\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["Contact","name","id","phone","dispatch","useDispatch","type","onClick","contactId","deleteContactThunk","Notify","propType","PropTypes","number","deleteContact","StyledContactsTitle","styled","StyledContactsList","selectContacts","state","appContacts","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","ContactsList","title","useSelector","filteredContacts","toLowerCase","includes","map","isRequired","StyledFilterTitle","StyledFilterBox","value","required","onChange","event","setFilter","currentTarget","StyledForm","Form","useState","setName","setNumber","handleChange","target","onSubmit","preventDefault","contactData","loveredContactData","some","contact","alert","addContactThunk","className","pattern","Contacts","IsLoggedIn","getIsLoggedIn","useEffect","fetchContacts","length","Loader","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}